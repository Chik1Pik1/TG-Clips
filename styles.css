// Firebase Config
const firebaseConfig = {
    apiKey: "AIzaSyCun4sBfsWl6Qqu4C-Qs8XB9fWqoFda8ck",
    authDomain: "tg-clips.firebaseapp.com",
    projectId: "tg-clips",
    storageBucket: "tg-clips.firebasestorage.app",
    messagingSenderId: "68837002540",
    appId: "1:68837002540:web:3215ed30dbf14db9ee3089",
    measurementId: "G-7R1RSQ0S4P"
};

// Инициализация Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const storage = firebase.storage();

// Класс для управления видео
class VideoManager {
    constructor() {
        this.videoPlaylist = [];
        this.videoDataStore = [];
        this.currentVideoIndex = 0;
        this.preloadedVideos = {};
        this.MAX_PRELOAD_SIZE = 3;
        this.MAX_PLAYLIST_SIZE = 10;
        this.userId = null;
        this.uploadedFileUrl = null;
        this.tg = window.Telegram?.WebApp;

        if (this.tg) {
            this.tg.ready();
            console.log('Telegram Web App инициализирован, userId:', this.tg.initDataUnsafe?.user?.id);
            this.tg.expand(); // Растягиваем Web App на весь экран
        } else {
            console.warn('Telegram Web App SDK не загружен. Работа в режиме браузера.');
        }

        this.channels = JSON.parse(localStorage.getItem('channels')) || {};
    }

    async init() {
        this.bindElements();
        this.bindEvents();
        await this.loadInitialVideos();
        if (this.tg?.initDataUnsafe?.user) {
            this.userId = this.tg.initDataUnsafe.user.id;
            this.showPlayer();
        }
    }

    bindElements() {
        this.authScreen = document.getElementById('authScreen');
        this.playerContainer = document.getElementById('playerContainer');
        this.authBtn = document.getElementById('authBtn');
        this.registerChannelBtn = document.getElementById('registerChannelBtn');
        this.userAvatar = document.getElementById('userAvatar');
        this.video = document.getElementById('videoPlayer');
        this.videoSource = document.getElementById('videoSource');
        this.viewCountEl = document.getElementById('viewCount');
        this.likeCountEl = document.getElementById('likeCount');
        this.dislikeCountEl = document.getElementById('dislikeCount');
        this.commentCountEl = document.getElementById('commentCount');
        this.shareCountEl = document.getElementById('shareCount');
        this.ratingEl = document.getElementById('rating');
        this.reactionBar = document.getElementById('reactionBar');
        this.reactionButtons = document.querySelectorAll('.reaction-btn');
        this.swipeArea = document.getElementById('swipeArea');
        this.reactionAnimation = document.getElementById('reactionAnimation');
        this.progressBar = document.getElementById('progressBar');
        this.progressRange = document.getElementById('progressRange');
        this.commentsWindow = document.getElementById('commentsWindow');
        this.commentsList = document.getElementById('commentsList');
        this.commentInput = document.getElementById('commentInput');
        this.sendCommentBtn = document.getElementById('sendComment');
        this.themeToggle = document.querySelector('.theme-toggle');
        this.toggleReactionBar = document.querySelector('.toggle-reaction-bar');
        this.plusBtn = document.querySelector('.plus-btn');
        this.uploadBtn = document.querySelector('.upload-btn');
        this.submenuUpload = document.getElementById('uploadVideo');
        this.submenuChat = document.getElementById('chatAuthor');
        this.uploadModal = document.getElementById('uploadModal');
        this.uploadProgress = document.getElementById('progressBarInner');
        this.uploadPreview = document.getElementById('uploadPreview');
        this.publishBtn = document.getElementById('publishBtn');
        this.cancelBtn = document.getElementById('cancelBtn');
        this.chatModal = document.getElementById('chatModal');
        this.chatMessages = document.getElementById('chatMessages');
        this.chatInput = document.getElementById('chatInput');
        this.sendChatMessage = document.getElementById('sendChatMessage');
        this.closeChat = document.getElementById('closeChat');
        this.shareModal = document.getElementById('shareModal');
        this.shareTelegram = document.getElementById('shareTelegram');
        this.copyLink = document.getElementById('copyLink');
        this.closeShare = document.getElementById('closeShare');
        this.videoDescription = document.getElementById('videoDescription');
        this.videoUpload = document.createElement('input');
        this.videoUpload.type = 'file';
        this.videoUpload.accept = 'video/mp4,video/quicktime,video/webm';
        this.videoUpload.style.display = 'none';
        document.body.appendChild(this.videoUpload);
    }

    bindEvents() {
        this.authBtn.addEventListener('click', () => this.handleAuth());
        if (this.registerChannelBtn) this.bindRegisterChannelBtn();
        if (this.userAvatar) this.bindUserAvatar();
        this.reactionButtons.forEach(btn => btn.addEventListener('click', (e) => this.handleReaction(btn.dataset.type, e)));
        this.plusBtn.addEventListener('click', (e) => this.toggleSubmenu(e));
        this.uploadBtn.addEventListener('click', (e) => this.downloadCurrentVideo(e));
        this.toggleReactionBar.addEventListener('click', (e) => this.toggleReactionBarVisibility(e));
        this.video.addEventListener('loadedmetadata', () => this.handleLoadedMetadata(), { once: true });
        this.video.addEventListener('play', () => this.handlePlay());
        this.video.addEventListener('pause', () => this.handlePause());
        this.video.addEventListener('ended', () => this.handleEnded());
        this.video.addEventListener('timeupdate', () => this.handleTimeUpdate());
        this.progressRange.addEventListener('input', (e) => this.handleProgressInput(e));
        this.setupSwipeAndMouseEvents();
        this.sendCommentBtn.addEventListener('click', () => this.addComment());
        this.commentInput.addEventListener('keypress', (e) => e.key === 'Enter' && this.addComment());
        this.submenuUpload.addEventListener('click', (e) => this.handleSubmenuUpload(e));
        this.videoUpload.addEventListener('change', (e) => this.handleVideoUpload(e));
        this.publishBtn.addEventListener('click', () => this.publishVideo());
        this.cancelBtn.addEventListener('click', () => this.cancelUpload());
        this.submenuChat.addEventListener('click', (e) => this.handleSubmenuChat(e));
        this.sendChatMessage.addEventListener('click', () => this.sendChat());
        this.chatInput.addEventListener('keypress', (e) => e.key === 'Enter' && this.sendChat());
        this.closeChat.addEventListener('click', () => this.chatModal.classList.remove('visible'));
        this.shareTelegram.addEventListener('click', () => this.shareViaTelegram());
        this.copyLink.addEventListener('click', () => this.copyVideoLink());
        this.closeShare.addEventListener('click', () => this.shareModal.classList.remove('visible'));
        this.themeToggle.addEventListener('click', () => this.toggleTheme());
        document.querySelector('.drag-handle')?.addEventListener('mousedown', (e) => this.startDragging(e));
        document.querySelector('.drag-handle')?.addEventListener('touchstart', (e) => this.startDragging(e), { passive: false });
        document.querySelector('.fullscreen-btn')?.addEventListener('click', (e) => this.toggleFullscreen(e));
        document.addEventListener('click', (e) => this.hideManagementListOnClickOutside(e));
    }

    async loadInitialVideos() {
        try {
            const snapshot = await db.collection('publicVideos').orderBy('timestamp', 'desc').limit(10).get();
            this.videoPlaylist = [];
            this.videoDataStore = [];
            snapshot.forEach(doc => {
                const data = doc.data();
                this.videoPlaylist.push(data.url);
                this.videoDataStore.push({
                    views: new Set(data.views || []),
                    likes: data.likes || 0,
                    dislikes: data.dislikes || 0,
                    userLikes: new Set(data.userLikes || []),
                    userDislikes: new Set(data.userDislikes || []),
                    comments: data.comments || [],
                    shares: data.shares || 0,
                    viewTime: data.viewTime || 0,
                    replays: data.replays || 0,
                    duration: data.duration || 0,
                    authorId: data.authorId,
                    lastPosition: data.lastPosition || 0,
                    chatMessages: data.chatMessages || [],
                    description: data.description || ''
                });
            });
            if (!this.videoPlaylist.length) {
                this.videoPlaylist = [
                    "https://firebasestorage.googleapis.com/v0/b/tg-clips.appspot.com/o/default%2Fdefault_video.mp4?alt=media" // Замените на свое видео в Firebase Storage
                ];
                this.videoDataStore = this.videoPlaylist.map(() => ({
                    views: new Set(),
                    likes: 0,
                    dislikes: 0,
                    userLikes: new Set(),
                    userDislikes: new Set(),
                    comments: [],
                    shares: 0,
                    viewTime: 0,
                    replays: 0,
                    duration: 0,
                    authorId: 'testAuthor123',
                    lastPosition: 0,
                    chatMessages: [],
                    description: 'Тестовое видео для Telegram Web App'
                }));
                if (this.tg) this.tg.showAlert('Нет видео в базе, загружено тестовое видео.');
            }
            this.loadVideo();
        } catch (error) {
            console.error('Ошибка загрузки видео:', error);
            if (this.tg) this.tg.showAlert(`Ошибка: ${error.message}`);
        }
    }

    handleAuth() {
        if (this.tg?.initDataUnsafe?.user) {
            this.userId = this.tg.initDataUnsafe.user.id;
            this.showPlayer();
        } else {
            this.userId = 'browserTestUser';
            this.showNotification('Имитация: Вы вошли как ' + this.userId);
            this.showPlayer();
        }
    }

    showPlayer() {
        this.authScreen.style.display = 'none';
        this.playerContainer.style.display = 'flex';
        this.initializePlayer();
    }

    bindRegisterChannelBtn() {
        this.registerChannelBtn.addEventListener('click', () => this.registerChannel());
    }

    bindUserAvatar() {
        this.userAvatar.addEventListener('click', (e) => {
            e.stopPropagation();
            if (!this.isHolding) {
                const channel = this.channels[this.userId];
                if (channel && channel.link) {
                    if (this.tg?.isVersionGte('6.0')) {
                        this.tg.openTelegramLink(channel.link);
                    } else {
                        window.open(channel.link, '_blank');
                    }
                } else {
                    this.registerChannel();
                }
            }
        });

        let holdTimeout = null;
        const holdDuration = 2000;
        this.isHolding = false;

        const startHold = (e) => {
            e.preventDefault();
            if (holdTimeout || this.isHolding) return;
            this.isHolding = true;
            this.userAvatar.classList.add('holding');
            holdTimeout = setTimeout(() => {
                this.showVideoManagementList();
                holdTimeout = null;
                this.isHolding = false;
                this.userAvatar.classList.remove('holding');
            }, holdDuration);
        };

        const stopHold = () => {
            if (holdTimeout) {
                clearTimeout(holdTimeout);
                holdTimeout = null;
            }
            this.isHolding = false;
            this.userAvatar.classList.remove('holding');
        };

        this.userAvatar.addEventListener('mousedown', startHold);
        this.userAvatar.addEventListener('mouseup', stopHold);
        this.userAvatar.addEventListener('mouseleave', stopHold);
        this.userAvatar.addEventListener('touchstart', startHold, { passive: false });
        this.userAvatar.addEventListener('touchend', stopHold);
        this.userAvatar.addEventListener('touchcancel', stopHold);
        this.userAvatar.addEventListener('touchmove', stopHold, { passive: false });
    }

    registerChannel() {
        if (!this.tg?.initDataUnsafe?.user && !this.userId) {
            this.showNotification('Пожалуйста, войдите через Telegram.');
            return;
        }

        if (this.channels[this.userId]?.link) {
            this.showNotification('Канал уже зарегистрирован!');
            if (this.tg?.isVersionGte('6.0')) {
                this.tg.openTelegramLink(this.channels[this.userId].link);
            } else {
                window.open(this.channels[this.userId].link, '_blank');
            }
            return;
        }

        const channelLink = prompt('Введите ссылку на ваш Telegram-канал (например, https://t.me/yourchannel):');
        if (channelLink && channelLink.match(/^https:\/\/t\.me\/[a-zA-Z0-9_]+$/)) {
            this.channels[this.userId] = { videos: [], link: channelLink };
            localStorage.setItem('channels', JSON.stringify(this.channels));
            this.showNotification('Канал успешно зарегистрирован!');
            if (this.authScreen.style.display !== 'none') this.showPlayer();
        } else {
            this.showNotification('Введите корректную ссылку на Telegram-канал.');
        }
    }

    initializePlayer() {
        this.isSubmenuOpen = false;
        this.isProgressBarActivated = false;
        this.lastTime = 0;
        this.hasViewed = false;
        this.isSwiping = false;

        if (this.userAvatar && this.tg?.initDataUnsafe?.user?.photo_url) {
            this.userAvatar.src = this.tg.initDataUnsafe.user.photo_url;
        } else if (this.userAvatar) {
            this.userAvatar.src = 'https://via.placeholder.com/40';
        }

        this.initializeTheme();
        this.initializeTooltips();
    }

    handleLoadedMetadata() {
        this.video.muted = true;
        this.video.play().then(() => {
            this.video.pause();
            this.video.muted = false;
        }).catch(err => console.error('Unlock error:', err));
        const videoData = this.videoDataStore[this.currentVideoIndex];
        videoData.duration = this.video.duration;
        this.progressRange.max = this.video.duration;
        this.progressRange.value = videoData.lastPosition || 0;
        this.updateVideoCache(this.currentVideoIndex);
        this.updateRating();
    }

    handlePlay() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        if (!this.hasViewed && this.userId) {
            videoData.views.add(this.userId);
            this.hasViewed = true;
            this.updateCounters();
        }
        if (this.isProgressBarActivated) this.progressBar.classList.remove('visible');
        this.isProgressBarActivated = false;
        this.commentsWindow.classList.remove('visible');
        this.preloadNextVideo();
    }

    handlePause() {
        if (!this.isProgressBarActivated) {
            this.isProgressBarActivated = true;
            this.progressBar.classList.add('visible');
        }
        this.videoDataStore[this.currentVideoIndex].lastPosition = this.video.currentTime;
        this.updateVideoCache(this.currentVideoIndex);
    }

    handleEnded() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        if (this.video.currentTime >= this.video.duration * 0.9) videoData.replays++;
        videoData.lastPosition = 0;
        this.updateVideoCache(this.currentVideoIndex);
        this.playNextVideo();
    }

    handleTimeUpdate() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        videoData.viewTime += this.video.currentTime - this.lastTime;
        videoData.lastPosition = this.video.currentTime;
        this.lastTime = this.video.currentTime;
        this.progressRange.value = this.video.currentTime;
        this.updateVideoCache(this.currentVideoIndex);
        this.updateRating();
    }

    handleProgressInput(e) {
        this.video.currentTime = e.target.value;
        this.videoDataStore[this.currentVideoIndex].lastPosition = this.video.currentTime;
        this.updateVideoCache(this.currentVideoIndex);
    }

    setupSwipeAndMouseEvents() {
        let startX = 0, startY = 0, endX = 0, endY = 0;
        let touchTimeout;

        this.swipeArea.addEventListener('touchstart', (e) => this.handleTouchStart(e, touchTimeout), { passive: false });
        this.swipeArea.addEventListener('touchmove', this.throttle((e) => this.handleTouchMove(e), 16), { passive: false });
        this.swipeArea.addEventListener('touchend', (e) => this.handleTouchEnd(e, touchTimeout));

        this.swipeArea.addEventListener('mousedown', (e) => this.handleMouseStart(e, touchTimeout));
        this.swipeArea.addEventListener('mousemove', this.throttle((e) => this.handleMouseMove(e), 16));
        this.swipeArea.addEventListener('mouseup', (e) => this.handleMouseEnd(e));
    }

    handleTouchStart(e, touchTimeout) {
        e.preventDefault();
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        touchTimeout = setTimeout(() => this.toggleVideoPlayback(), 200);
        this.isSwiping = false;
    }

    handleTouchMove(e) {
        endX = e.touches[0].clientX;
        endY = e.touches[0].clientY;
        const deltaX = endX - startX;
        const deltaY = endY - startY;

        if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {
            clearTimeout(touchTimeout);
            this.isSwiping = true;
        }
    }

    handleTouchEnd(e, touchTimeout) {
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        const swipeThresholdHorizontal = 50;
        const swipeThresholdVertical = 20;

        if (Math.abs(deltaX) < 10 && Math.abs(deltaY) < 10) {
            this.isSwiping = false;
            return;
        }

        clearTimeout(touchTimeout);

        if (!this.userId) {
            this.isSwiping = false;
            return;
        }

        if (Math.abs(deltaX) > swipeThresholdHorizontal && Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > 0) this.playNextVideo();
            else this.playPreviousVideo();
            if (this.isProgressBarActivated) this.progressBar.classList.remove('visible');
            this.isProgressBarActivated = false;
        } else if (Math.abs(deltaY) > swipeThresholdVertical) {
            if (deltaY < 0) {
                this.handleReaction('like');
                this.showFloatingReaction('like', endX, startY);
            } else {
                this.handleReaction('dislike');
                this.showFloatingReaction('dislike', endX, startY);
            }
        }
        this.isSwiping = false;
    }

    handleMouseStart(e, touchTimeout) {
        e.preventDefault();
        this.isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        touchTimeout = setTimeout(() => this.toggleVideoPlayback(), 200);
        this.isSwiping = false;
    }

    handleMouseMove(e) {
        if (!this.isDragging) return;
        endX = e.clientX;
        endY = e.clientY;
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {
            clearTimeout(touchTimeout);
            this.isSwiping = true;
        }
    }

    handleMouseEnd(e) {
        if (!this.isDragging) return;
        this.isDragging = false;
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        const swipeThresholdHorizontal = 50;
        const swipeThresholdVertical = 20;

        if (Math.abs(deltaX) < 10 && Math.abs(deltaY) < 10) {
            this.isSwiping = false;
            return;
        }

        clearTimeout(touchTimeout);

        if (!this.userId) {
            this.isSwiping = false;
            return;
        }

        if (Math.abs(deltaX) > swipeThresholdHorizontal && Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > 0) this.playNextVideo();
            else this.playPreviousVideo();
            if (this.isProgressBarActivated) this.progressBar.classList.remove('visible');
            this.isProgressBarActivated = false;
        } else if (Math.abs(deltaY) > swipeThresholdVertical) {
            if (deltaY < 0) {
                this.handleReaction('like');
                this.showFloatingReaction('like', endX, startY);
            } else {
                this.handleReaction('dislike');
                this.showFloatingReaction('dislike', endX, startY);
            }
        }
        this.isSwiping = false;
    }

    showFloatingReaction(type, x, y) {
        const reaction = document.createElement('div');
        reaction.className = `floating-reaction ${type}`;
        reaction.innerHTML = type === 'like' ? '👍' : '👎';
        reaction.style.left = `${x}px`;
        reaction.style.top = `${y}px`;
        document.body.appendChild(reaction);
        setTimeout(() => reaction.remove(), 1500);
    }

    playNextVideo() {
        this.recommendNextVideo();
        this.loadVideo('left');
        this.hasViewed = false;
    }

    playPreviousVideo() {
        this.currentVideoIndex = (this.currentVideoIndex - 1 + this.videoPlaylist.length) % this.videoPlaylist.length;
        this.loadVideo('right');
        this.hasViewed = false;
    }

    loadVideo(direction = 'left') {
        const fadeOutClass = direction === 'left' ? 'fade-out-left' : 'fade-out-right';
        this.video.classList.remove('fade-in');
        this.video.classList.add(fadeOutClass);
        this.video.pause();
        setTimeout(() => {
            this.videoSource.src = this.videoPlaylist[this.currentVideoIndex];
            this.video.load();
            const timeout = setTimeout(() => {
                if (!this.video.readyState) {
                    if (this.tg) this.tg.showAlert('Ошибка загрузки видео!');
                    this.playNextVideo();
                }
            }, 5000);
            this.video.addEventListener('canplay', () => {
                clearTimeout(timeout);
                const lastPosition = this.videoDataStore[this.currentVideoIndex].lastPosition;
                this.video.classList.remove('fade-out-left', 'fade-out-right');
                this.video.classList.add('fade-in');
                if (lastPosition > 0 && lastPosition < this.video.duration) {
                    this.showResumePrompt(lastPosition);
                } else {
                    this.video.play().catch(err => {
                        console.log("Ошибка воспроизведения:", err);
                        if (this.tg) this.tg.showAlert('Не удалось воспроизвести видео');
                    });
                }
            }, { once: true });
            this.video.addEventListener('error', () => {
                if (this.tg) this.tg.showAlert('Видео недоступно');
                this.playNextVideo();
            }, { once: true });
            this.updateCounters();
            this.updateComments();
            this.updateRating();
            this.updateDescription();
            this.preloadNextVideo();
        }, 300);
    }

    showResumePrompt(lastPosition) {
        const resumePrompt = document.createElement('div');
        resumePrompt.style.cssText = `
            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background: var(--notification-bg); color: var(--notification-text);
            padding: 20px; border-radius: 10px; z-index: 100; text-align: center;
        `;
        resumePrompt.innerHTML = `
            <p>Продолжить с ${this.formatTime(lastPosition)}?</p>
            <button id="resumeYes">Да</button>
            <button id="resumeNo">Нет</button>
        `;
        document.body.appendChild(resumePrompt);

        document.getElementById('resumeYes').addEventListener('click', () => {
            this.video.currentTime = lastPosition;
            this.video.play();
            document.body.removeChild(resumePrompt);
        });

        document.getElementById('resumeNo').addEventListener('click', () => {
            this.video.currentTime = 0;
            this.video.play();
            document.body.removeChild(resumePrompt);
        });
    }

    async addComment() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        const text = this.commentInput.value.trim();
        if (text && this.userId) {
            const newComment = {
                userId: this.userId,
                username: this.tg?.initDataUnsafe?.user?.username || 'Аноним',
                text: text,
                timestamp: Date.now()
            };
            videoData.comments.push(newComment);
            this.updateComments();
            this.updateVideoCache(this.currentVideoIndex);
            this.commentInput.value = '';
            this.showNotification('Комментарий добавлен!');
        }
    }

    updateComments() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        this.commentsList.innerHTML = '';
        videoData.comments.forEach(comment => {
            const commentEl = document.createElement('div');
            commentEl.className = 'comment';
            commentEl.innerHTML = `
                <img src="${this.tg?.initDataUnsafe?.user?.photo_url || 'https://via.placeholder.com/30'}" alt="Avatar" class="comment-avatar">
                <div class="comment-content">
                    <span class="comment-username">${comment.username}</span>
                    <div class="comment-text">${comment.text}</div>
                </div>
            `;
            this.commentsList.appendChild(commentEl);
        });
        this.commentCountEl.textContent = videoData.comments.length;
    }

    toggleSubmenu(e) {
        e.stopPropagation();
        this.isSubmenuOpen = !this.isSubmenuOpen;
        if (this.isSubmenuOpen) {
            this.submenuUpload.classList.add('active');
            this.submenuChat.classList.add('active');
        } else {
            this.submenuUpload.classList.remove('active');
            this.submenuChat.classList.remove('active');
        }
        document.addEventListener('click', (event) => this.hideSubmenuOnClickOutside(event));
    }

    hideSubmenuOnClickOutside(event) {
        if (!this.plusBtn.contains(event.target) && !this.submenuUpload.contains(event.target) && !this.submenuChat.contains(event.target)) {
            this.isSubmenuOpen = false;
            this.submenuUpload.classList.remove('active');
            this.submenuChat.classList.remove('active');
            document.removeEventListener('click', this.hideSubmenuOnClickOutside);
        }
    }

    handleSubmenuUpload(e) {
        e.stopPropagation();
        this.videoUpload.click();
        this.isSubmenuOpen = false;
        this.submenuUpload.classList.remove('active');
        this.submenuChat.classList.remove('active');
    }

    handleVideoUpload(e) {
        const file = e.target.files[0];
        if (file) {
            this.uploadModal.classList.add('visible');
            this.uploadPreview.src = URL.createObjectURL(file);
            this.uploadPreview.style.display = 'block';
            const storageRef = storage.ref(`videos/${this.userId}/${Date.now()}_${file.name}`);
            const uploadTask = storageRef.put(file);

            uploadTask.on('state_changed',
                (snapshot) => {
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    this.uploadProgress.style.width = `${progress}%`;
                },
                (error) => {
                    console.error('Upload error:', error);
                    if (this.tg) this.tg.showAlert('Ошибка загрузки видео');
                },
                () => {
                    uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                        this.uploadedFileUrl = downloadURL;
                        this.showNotification('Видео загружено, опубликуйте его!');
                    });
                }
            );
        }
    }

    publishVideo() {
        if (this.uploadedFileUrl && this.userId) {
            const videoData = {
                url: this.uploadedFileUrl,
                views: [],
                likes: 0,
                dislikes: 0,
                userLikes: [],
                userDislikes: [],
                comments: [],
                shares: 0,
                viewTime: 0,
                replays: 0,
                duration: this.uploadPreview.duration,
                authorId: this.userId,
                lastPosition: 0,
                chatMessages: [],
                description: this.videoDescription.value || '',
                timestamp: Date.now()
            };
            db.collection('publicVideos').add(videoData).then(() => {
                this.videoPlaylist.push(videoData.url);
                this.videoDataStore.push({
                    views: new Set(),
                    likes: 0,
                    dislikes: 0,
                    userLikes: new Set(),
                    userDislikes: new Set(),
                    comments: [],
                    shares: 0,
                    viewTime: 0,
                    replays: 0,
                    duration: videoData.duration,
                    authorId: this.userId,
                    lastPosition: 0,
                    chatMessages: [],
                    description: videoData.description
                });
                this.uploadModal.classList.remove('visible');
                this.uploadPreview.style.display = 'none';
                this.uploadProgress.style.width = '0%';
                this.videoUpload.value = '';
                this.videoDescription.value = '';
                this.showNotification('Видео опубликовано!');
            }).catch(err => {
                console.error('Publish error:', err);
                if (this.tg) this.tg.showAlert('Ошибка публикации видео');
            });
        }
    }

    cancelUpload() {
        this.uploadModal.classList.remove('visible');
        this.uploadPreview.style.display = 'none';
        this.uploadProgress.style.width = '0%';
        this.videoUpload.value = '';
        this.uploadedFileUrl = null;
        this.videoDescription.value = '';
    }

    handleSubmenuChat(e) {
        e.stopPropagation();
        this.chatModal.classList.add('visible');
        this.updateChatMessages();
        this.isSubmenuOpen = false;
        this.submenuUpload.classList.remove('active');
        this.submenuChat.classList.remove('active');
    }

    sendChat() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        const text = this.chatInput.value.trim();
        if (text && this.userId) {
            const message = {
                userId: this.userId,
                text: text,
                timestamp: Date.now()
            };
            videoData.chatMessages.push(message);
            this.updateChatMessages();
            this.updateVideoCache(this.currentVideoIndex);
            this.chatInput.value = '';
            this.showNotification('Сообщение отправлено автору!');
        }
    }

    updateChatMessages() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        this.chatMessages.innerHTML = '';
        videoData.chatMessages.forEach(msg => {
            const msgEl = document.createElement('div');
            msgEl.className = `message ${msg.userId === this.userId ? 'sent' : 'received'}`;
            msgEl.textContent = msg.text;
            this.chatMessages.appendChild(msgEl);
        });
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    shareViaTelegram() {
        const url = this.videoPlaylist[this.currentVideoIndex];
        if (this.tg?.isVersionGte('6.0')) {
            this.tg.sendData(JSON.stringify({ type: 'share', url: url }));
        } else {
            window.open(`https://t.me/share/url?url=${encodeURIComponent(url)}`, '_blank');
        }
        this.videoDataStore[this.currentVideoIndex].shares++;
        this.updateCounters();
        this.updateVideoCache(this.currentVideoIndex);
        this.shareModal.classList.remove('visible');
    }

    copyVideoLink() {
        const url = this.videoPlaylist[this.currentVideoIndex];
        navigator.clipboard.writeText(url).then(() => {
            this.showNotification('Ссылка скопирована!');
            this.videoDataStore[this.currentVideoIndex].shares++;
            this.updateCounters();
            this.updateVideoCache(this.currentVideoIndex);
        });
        this.shareModal.classList.remove('visible');
    }

    toggleTheme() {
        document.body.classList.toggle('dark');
        localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
    }

    initializeTheme() {
        if (localStorage.getItem('theme') === 'dark') {
            document.body.classList.add('dark');
        }
    }

    initializeTooltips() {
        const tooltips = [
            { id: 'tooltipSwipe', delay: 1000 },
            { id: 'tooltipReactions', delay: 2000 },
            { id: 'tooltipUpload', delay: 3000 },
            { id: 'tooltipTheme', delay: 4000 }
        ];
        tooltips.forEach(tip => {
            const tooltip = document.getElementById(tip.id);
            setTimeout(() => {
                tooltip.classList.add('visible');
                setTimeout(() => tooltip.classList.remove('visible'), 3000);
            }, tip.delay);
        });
    }

    toggleVideoPlayback() {
        if (this.isSwiping) return;
        if (this.video.paused) {
            this.video.play();
        } else {
            this.video.pause();
        }
    }

    toggleReactionBarVisibility(e) {
        e.stopPropagation();
        this.reactionBar.classList.toggle('visible');
        this.toggleReactionBar.classList.toggle('active');
    }

    handleReaction(type, e) {
        if (!this.userId) {
            this.showNotification('Войдите, чтобы оставить реакцию');
            return;
        }

        const videoData = this.videoDataStore[this.currentVideoIndex];
        const isLike = type === 'like';
        const isDislike = type === 'dislike';
        const isComment = type === 'comment';
        const isShare = type === 'share';

        if (isLike || isDislike) {
            const userLikes = videoData.userLikes;
            const userDislikes = videoData.userDislikes;

            if (isLike) {
                if (userLikes.has(this.userId)) {
                    userLikes.delete(this.userId);
                    videoData.likes--;
                } else {
                    if (userDislikes.has(this.userId)) {
                        userDislikes.delete(this.userId);
                        videoData.dislikes--;
                    }
                    userLikes.add(this.userId);
                    videoData.likes++;
                    this.showReactionAnimation('👍');
                }
            } else if (isDislike) {
                if (userDislikes.has(this.userId)) {
                    userDislikes.delete(this.userId);
                    videoData.dislikes--;
                } else {
                    if (userLikes.has(this.userId)) {
                        userLikes.delete(this.userId);
                        videoData.likes--;
                    }
                    userDislikes.add(this.userId);
                    videoData.dislikes++;
                    this.showReactionAnimation('👎');
                }
            }
            this.updateCounters();
            this.updateRating();
            this.updateVideoCache(this.currentVideoIndex);
        } else if (isComment) {
            this.commentsWindow.classList.toggle('visible');
        } else if (isShare) {
            this.shareModal.classList.add('visible');
        }
    }

    showReactionAnimation(emoji) {
        this.reactionAnimation.textContent = emoji;
        this.reactionAnimation.classList.add('show');
        setTimeout(() => this.reactionAnimation.classList.remove('show'), 2000);
    }

    updateCounters() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        this.viewCountEl.querySelector('span').textContent = videoData.views.size;
        this.likeCountEl.textContent = videoData.likes;
        this.dislikeCountEl.textContent = videoData.dislikes;
        this.commentCountEl.textContent = videoData.comments.length;
        this.shareCountEl.textContent = videoData.shares;
    }

    updateRating() {
        const videoData = this.videoDataStore[this.currentVideoIndex];
        const totalReactions = videoData.likes + videoData.dislikes;
        const rating = totalReactions > 0 ? (videoData.likes / totalReactions) * 5 : 5;
        this.ratingEl.textContent = '★'.repeat(Math.round(rating)) + '☆'.repeat(5 - Math.round(rating));
    }

    updateDescription() {
        let descriptionEl = document.getElementById('videoDescriptionDisplay');
        if (!descriptionEl) {
            descriptionEl = document.createElement('div');
            descriptionEl.id = 'videoDescriptionDisplay';
            document.body.appendChild(descriptionEl);
        }
        const description = this.videoDataStore[this.currentVideoIndex].description;
        descriptionEl.textContent = description || '';
        descriptionEl.style.display = description ? 'block' : 'none';
    }

    preloadNextVideo() {
        const nextIndex = (this.currentVideoIndex + 1) % this.videoPlaylist.length;
        if (!this.preloadedVideos[nextIndex]) {
            const video = document.createElement('video');
            video.src = this.videoPlaylist[nextIndex];
            video.preload = 'auto';
            video.muted = true;
            video.play().then(() => video.pause()).catch(() => {});
            this.preloadedVideos[nextIndex] = video;
        }
    }

    recommendNextVideo() {
        this.currentVideoIndex = (this.currentVideoIndex + 1) % this.videoPlaylist.length;
        if (this.videoPlaylist.length < this.MAX_PLAYLIST_SIZE) {
            this.loadMoreVideos();
        }
    }

    async loadMoreVideos() {
        try {
            const lastVideo = this.videoPlaylist[this.videoPlaylist.length - 1];
            const snapshot = await db.collection('publicVideos')
                .orderBy('timestamp', 'desc')
                .startAfter(lastVideo.timestamp)
                .limit(5)
                .get();
            snapshot.forEach(doc => {
                const data = doc.data();
                this.videoPlaylist.push(data.url);
                this.videoDataStore.push({
                    views: new Set(data.views || []),
                    likes: data.likes || 0,
                    dislikes: data.dislikes || 0,
                    userLikes: new Set(data.userLikes || []),
                    userDislikes: new Set(data.userDislikes || []),
                    comments: data.comments || [],
                    shares: data.shares || 0,
                    viewTime: data.viewTime || 0,
                    replays: data.replays || 0,
                    duration: data.duration || 0,
                    authorId: data.authorId,
                    lastPosition: data.lastPosition || 0,
                    chatMessages: data.chatMessages || [],
                    description: data.description || ''
                });
            });
        } catch (error) {
            console.error('Ошибка загрузки дополнительных видео:', error);
            if (this.tg) this.tg.showAlert('Не удалось загрузить больше видео');
        }
    }

    updateVideoCache(index) {
        const videoData = this.videoDataStore[index];
        db.collection('publicVideos')
            .where('url', '==', this.videoPlaylist[index])
            .get()
            .then(snapshot => {
                snapshot.forEach(doc => {
                    doc.ref.update({
                        views: Array.from(videoData.views),
                        likes: videoData.likes,
                        dislikes: videoData.dislikes,
                        userLikes: Array.from(videoData.userLikes),
                        userDislikes: Array.from(videoData.userDislikes),
                        comments: videoData.comments,
                        shares: videoData.shares,
                        viewTime: videoData.viewTime,
                        replays: videoData.replays,
                        duration: videoData.duration,
                        lastPosition: videoData.lastPosition,
                        chatMessages: videoData.chatMessages,
                        description: videoData.description
                    });
                });
            });
    }

    showNotification(message) {
        if (this.tg) {
            this.tg.showAlert(message);
        } else {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 10%; left: 50%; transform: translateX(-50%);
                background: var(--notification-bg); color: var(--notification-text);
                padding: 10px 20px; border-radius: 5px; z-index: 1000;
                opacity: 0; transition: opacity 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.style.opacity = '1', 10);
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }
    }

    throttle(func, limit) {
        let inThrottle;
        return function (...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;
    }

    downloadCurrentVideo(e) {
        e.stopPropagation();
        const url = this.videoPlaylist[this.currentVideoIndex];
        const a = document.createElement('a');
        a.href = url;
        a.download = `video_${this.currentVideoIndex}.mp4`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        this.showNotification('Скачивание начато!');
    }

    startDragging(e) {
        e.preventDefault();
        const isTouch = e.type === 'touchstart';
        const startY = isTouch ? e.touches[0].clientY : e.clientY;
        const initialHeight = this.commentsWindow.offsetHeight;
        let newHeight = initialHeight;

        const moveHandler = (moveEvent) => {
            const currentY = isTouch ? moveEvent.touches[0].clientY : moveEvent.clientY;
            const deltaY = startY - currentY;
            newHeight = Math.max(100, Math.min(window.innerHeight * 0.9, initialHeight + deltaY));
            this.commentsWindow.style.height = `${newHeight}px`;
        };

        const upHandler = () => {
            document.removeEventListener(isTouch ? 'touchmove' : 'mousemove', moveHandler);
            document.removeEventListener(isTouch ? 'touchend' : 'mouseup', upHandler);
            if (newHeight < 150) this.commentsWindow.classList.remove('visible');
        };

        document.addEventListener(isTouch ? 'touchmove' : 'mousemove', moveHandler, { passive: false });
        document.addEventListener(isTouch ? 'touchend' : 'mouseup', upHandler);
    }

    toggleFullscreen(e) {
        e.stopPropagation();
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => console.error('Fullscreen error:', err));
        } else {
            document.exitFullscreen();
        }
    }

    showVideoManagementList() {
        let list = document.getElementById('videoManagementList');
        if (!list) {
            list = document.createElement('div');
            list.id = 'videoManagementList';
            document.body.appendChild(list);
        }
        list.innerHTML = '<button class="close-list-btn">✖</button>';
        const videos = this.channels[this.userId]?.videos || [];
        videos.forEach((video, index) => {
            const item = document.createElement('div');
            item.className = 'video-item';
            item.innerHTML = `
                <span>${video.name || `Видео ${index + 1}`}</span>
                <button data-index="${index}">Удалить</button>
            `;
            list.appendChild(item);
        });
        list.classList.add('visible');
        list.querySelector('.close-list-btn').addEventListener('click', () => list.classList.remove('visible'));
        list.querySelectorAll('.video-item button').forEach(btn => {
            btn.addEventListener('click', () => this.deleteVideo(parseInt(btn.dataset.index)));
        });
    }

    deleteVideo(index) {
        if (this.channels[this.userId]?.videos[index]) {
            this.channels[this.userId].videos.splice(index, 1);
            localStorage.setItem('channels', JSON.stringify(this.channels));
            this.showVideoManagementList();
            this.showNotification('Видео удалено из вашего канала!');
        }
    }

    hideManagementListOnClickOutside(e) {
        const list = document.getElementById('videoManagementList');
        if (list && list.classList.contains('visible') && !list.contains(e.target) && !this.userAvatar.contains(e.target)) {
            list.classList.remove('visible');
        }
    }
}

// Инициализация приложения
const videoManager = new VideoManager();
videoManager.init();
